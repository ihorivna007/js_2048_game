{"version":3,"sources":["scripts/main.js"],"names":["hasUpdates","boardSize","bookedCells","arrayOfValues","newValues","up","down","right","left","cells","document","querySelectorAll","messageStart","querySelector","start","messageLose","lose","messageWin","win","score","scoreCounter","splice","Math","floor","random","takeStep","position","includes","step","value","classList","add","innerHTML","push","newGame","handleScore","replace","keepCellsValues","clearBoard","cell","length","listOfClasses","toString","remove","forEach","index","getBookedPositions","clearArray","fillInBoard","array","pop","handleArrowClick","side","i","slice","filter","extremeCellStep","extremeCellPosition","leftOrUp","j","k","newValue","checkNewStepAvailable","trigger","pairs","testCell","rightsCell","undefined","lowerCell","addEventListener","evn","key"],"mappings":"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","file":"main.c0d58904.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst boardSize = 16;\nconst bookedCells = [];\nconst arrayOfValues = [];\nconst newValues = [2, 2, 2, 2, 2, 2, 2, 2, 2];\n\nconst up = 'ArrowUp';\nconst down = 'ArrowDown';\nconst right = 'ArrowRight';\nconst left = 'ArrowLeft';\n\nconst cells = document.querySelectorAll('.field-cell');\nconst messageStart = document.querySelector('.message-start');\nconst start = document.querySelector('.start');\n\nconst messageLose = document.querySelector('.message-lose');\nlet lose = false;\n\nconst messageWin = document.querySelector('.message-win');\nlet win = false;\n\nconst score = document.querySelector('.game-score');\nlet scoreCounter = 0;\nlet hasUpdates;\n\nnewValues.splice(Math.floor(Math.random() * 10), 0, 4);\n\nconst takeStep = () => {\n  let position = Math.floor(Math.random() * boardSize);\n\n  while (bookedCells.includes(position)) {\n    position = Math.floor(Math.random() * boardSize);\n  }\n\n  const step = cells[position];\n  const value = newValues[Math.floor(Math.random() * 10)];\n\n  step.classList.add(`field-cell--${value}`);\n  step.innerHTML = value;\n\n  bookedCells.push(position);\n};\n\nconst newGame = () => {\n  handleScore(0);\n\n  lose = false;\n  win = false;\n\n  takeStep();\n  takeStep();\n\n  start.classList.replace('start', 'restart');\n  start.innerHTML = 'Restart';\n\n  keepCellsValues();\n};\n\nconst clearBoard = () => {\n  for (const cell of cells) {\n    if (cell.classList.length > 1) {\n      const listOfClasses\n        = cell.classList.toString().replace('field-cell ', '');\n\n      cell.classList.remove(listOfClasses);\n      cell.innerHTML = '';\n    }\n  }\n};\n\nconst keepCellsValues = () => {\n  cells.forEach((cell, index) => {\n    if (cell.innerHTML) {\n      arrayOfValues.push([index, +cell.innerHTML]);\n    }\n  });\n};\n\nconst getBookedPositions = () => {\n  clearArray(bookedCells);\n\n  cells.forEach((cell, index) => {\n    if (cell.innerHTML !== '') {\n      bookedCells.push(index);\n    }\n  });\n};\n\nconst fillInBoard = (array) => {\n  array.forEach(cell => {\n    cells[cell[0]].classList.add(`field-cell--${cell[1]}`);\n    cells[cell[0]].innerHTML = cell[1];\n  });\n};\n\nconst clearArray = (array) => {\n  while (array.length > 0) {\n    array.pop();\n  }\n};\n\nconst handleScore = (value) => {\n  value === 0 ? scoreCounter = value : scoreCounter += value;\n  score.innerHTML = scoreCounter;\n};\n\nconst handleArrowClick = (side) => {\n  hasUpdates = false;\n\n  for (let i = 0; i < 4; i++) {\n    const slice = side === up || side === down\n      ? arrayOfValues.filter(value => value[0] % 4 === i)\n      : arrayOfValues.filter(value => Math.floor(value[0] / 4) === i);\n\n    if (slice.length) {\n      let extremeCellStep;\n      let extremeCellPosition;\n\n      switch (side) {\n        case up:\n          extremeCellPosition = i;\n          extremeCellStep = 4;\n          break;\n\n        case down:\n          extremeCellPosition = 12 + i;\n          extremeCellStep = -4;\n          break;\n\n        case right:\n          extremeCellPosition = 4 * i + 3;\n          extremeCellStep = -1;\n          break;\n\n        case left:\n          extremeCellPosition = 4 * i;\n          extremeCellStep = 1;\n          break;\n      }\n\n      const step = extremeCellStep > 0 ? 1 : -1;\n      const leftOrUp = (side === up || side === left);\n\n      for (let j = 0; j < slice.length; j++) {\n        const k = leftOrUp ? j : slice.length - j - 1;\n\n        if (slice[k + step] && slice[k][1] === slice[k + step][1]) {\n          const newValue = slice[k][1] * 2;\n\n          slice[k][1] = newValue;\n          slice.splice(k + step, 1);\n          handleScore(newValue);\n\n          hasUpdates = true;\n        }\n      }\n\n      for (let j = 0; j < slice.length; j++) {\n        const k = leftOrUp ? j : slice.length - j - 1;\n\n        if (slice[k]) {\n          if ((slice[k][0] - extremeCellPosition) * step > 0) {\n            slice[k][0] = extremeCellPosition;\n            hasUpdates = true;\n          }\n          extremeCellPosition += extremeCellStep;\n        }\n      }\n\n      fillInBoard(slice);\n    }\n  }\n\n  win = document.querySelector('.field-cell--2048');\n\n  if (win) {\n    messageWin.classList.remove('hidden');\n  }\n};\n\nconst checkNewStepAvailable = (trigger) => {\n  if (trigger) {\n    let pairs = 0;\n\n    for (let i = 0; i < boardSize && pairs === 0; i++) {\n      const testCell = +cells[i].innerHTML;\n      const rightsCell = cells[i + 1] ? +cells[i + 1].innerHTML : undefined;\n      const lowerCell = cells[i + 4] ? +cells[i + 4].innerHTML : undefined;\n\n      switch (true) {\n        case (rightsCell && testCell === rightsCell):\n          pairs++;\n          break;\n\n        case (lowerCell && testCell === lowerCell):\n          pairs++;\n          break;\n      }\n    }\n\n    lose = pairs === 0;\n\n    if (lose) {\n      messageLose.classList.remove('hidden');\n    }\n  }\n};\n\nstart.addEventListener('click', () => {\n  clearBoard();\n  clearArray(bookedCells);\n  clearArray(arrayOfValues);\n\n  newGame();\n\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageStart.classList.add('hidden');\n});\n\ndocument.addEventListener('keydown', evn => {\n  if (document.querySelector('.restart') && !lose) {\n    const key = evn.key;\n\n    clearBoard();\n    handleArrowClick(key);\n    clearArray(arrayOfValues);\n    getBookedPositions();\n\n    if (bookedCells.length !== boardSize && hasUpdates) {\n      takeStep();\n    }\n\n    keepCellsValues();\n    checkNewStepAvailable(bookedCells.length === boardSize);\n  }\n});\n"]}